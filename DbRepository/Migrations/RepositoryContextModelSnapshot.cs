// <auto-generated />
using System;
using DbRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DbRepository.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.GenrePreference", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Genre");

                    b.Property<int>("Preference");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("GenrePreference");
                });

            modelBuilder.Entity("Model.Playlist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("OwnerID");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Model.PlaylistSong", b =>
                {
                    b.Property<int>("PlaylistId");

                    b.Property<int>("SongId");

                    b.HasKey("PlaylistId", "SongId");

                    b.HasIndex("SongId");

                    b.ToTable("PlaylistSongs");
                });

            modelBuilder.Entity("Model.Song", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Band");

                    b.Property<int>("Genre");

                    b.Property<string>("Name");

                    b.Property<int?>("StateID");

                    b.Property<string>("Url");

                    b.HasKey("ID");

                    b.HasIndex("StateID");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Model.State", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Location");

                    b.Property<int>("Mood");

                    b.Property<int>("Weather");

                    b.HasKey("ID");

                    b.ToTable("State");
                });

            modelBuilder.Entity("Model.Token", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpiredDate");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<int>("Role");

                    b.Property<int?>("StateID");

                    b.Property<int?>("TokenID");

                    b.HasKey("ID");

                    b.HasIndex("StateID");

                    b.HasIndex("TokenID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Model.GenrePreference", b =>
                {
                    b.HasOne("Model.User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Model.Playlist", b =>
                {
                    b.HasOne("Model.User", "Owner")
                        .WithMany("Playlists")
                        .HasForeignKey("OwnerID");
                });

            modelBuilder.Entity("Model.PlaylistSong", b =>
                {
                    b.HasOne("Model.Playlist", "PlayList")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Song", "Song")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Song", b =>
                {
                    b.HasOne("Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateID");
                });

            modelBuilder.Entity("Model.User", b =>
                {
                    b.HasOne("Model.State", "State")
                        .WithMany()
                        .HasForeignKey("StateID");

                    b.HasOne("Model.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenID");
                });
#pragma warning restore 612, 618
        }
    }
}
